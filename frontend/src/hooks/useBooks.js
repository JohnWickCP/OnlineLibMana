/**
 * hooks/useBooks.js
 * Custom hooks ƒë·ªÉ qu·∫£n l√Ω s√°ch
 * - Fetch danh s√°ch s√°ch
 * - Fetch chi ti·∫øt s√°ch
 * - Search s√°ch
 * - Get rating
 */

import { useState, useEffect } from 'react';
import { booksAPI } from '@/lib/api';

/**
 * useBooks Hook
 * L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch t·ª´ backend
 * 
 * @returns {Object} { books, loading, error, refetch }
 * 
 * @example
 * const { books, loading, error } = useBooks();
 */
export const useBooks = () => {
  // State l∆∞u danh s√°ch s√°ch
  const [books, setBooks] = useState([]);
  
  // State loading
  const [loading, setLoading] = useState(true);
  
  // State l·ªói
  const [error, setError] = useState(null);

  /**
   * H√†m fetch danh s√°ch s√°ch
   */
  const fetchBooks = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üìö ƒêang t·∫£i danh s√°ch s√°ch...');
      
      // G·ªçi API l·∫•y t·∫•t c·∫£ s√°ch
      const response = await booksAPI.getAllBooks();
      
      // Response c√≥ th·ªÉ l√† array ho·∫∑c object
      const booksData = Array.isArray(response) 
        ? response 
        : response.data || response.content || [];
      
      setBooks(booksData);
      console.log('‚úÖ ƒê√£ t·∫£i', booksData.length, 'cu·ªën s√°ch');
    } catch (err) {
      console.error('‚ùå L·ªói khi t·∫£i s√°ch:', err);
      setError(err.response?.data?.message || err.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch s√°ch');
      setBooks([]);
    } finally {
      setLoading(false);
    }
  };

  /**
   * H√†m refetch - t·∫£i l·∫°i danh s√°ch
   */
  const refetch = () => {
    fetchBooks();
  };

  // T·ª± ƒë·ªông fetch khi component mount
  useEffect(() => {
    fetchBooks();
  }, []);

  return {
    books,      // Danh s√°ch s√°ch
    loading,    // Tr·∫°ng th√°i loading
    error,      // Th√¥ng b√°o l·ªói
    refetch,    // H√†m reload
  };
};

/**
 * useBookDetail Hook
 * L·∫•y chi ti·∫øt m·ªôt cu·ªën s√°ch v√† rating c·ªßa n√≥
 * 
 * @param {string|number} bookId - ID c·ªßa s√°ch
 * @returns {Object} { book, rating, loading, error, refetch }
 * 
 * @example
 * const { book, rating, loading } = useBookDetail(bookId);
 */
export const useBookDetail = (bookId) => {
  // State l∆∞u th√¥ng tin s√°ch
  const [book, setBook] = useState(null);
  
  // State l∆∞u rating
  const [rating, setRating] = useState(null);
  
  // State loading
  const [loading, setLoading] = useState(true);
  
  // State l·ªói
  const [error, setError] = useState(null);

  /**
   * H√†m fetch chi ti·∫øt s√°ch
   */
  const fetchBook = async () => {
    // N·∫øu kh√¥ng c√≥ bookId th√¨ kh√¥ng fetch
    if (!bookId) {
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);

      console.log('üìñ ƒêang t·∫£i chi ti·∫øt s√°ch:', bookId);
      
      // Fetch book detail v√† rating song song (parallel)
      const [bookData, ratingData] = await Promise.all([
        booksAPI.getBookById(bookId),
        booksAPI.getBookRating(bookId).catch(() => null), // Rating c√≥ th·ªÉ kh√¥ng c√≥, kh√¥ng throw error
      ]);

      setBook(bookData);
      setRating(ratingData);
      console.log('‚úÖ ƒê√£ t·∫£i chi ti·∫øt s√°ch');
    } catch (err) {
      console.error('‚ùå L·ªói khi t·∫£i chi ti·∫øt s√°ch:', err);
      setError(err.response?.data?.message || err.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s√°ch');
      setBook(null);
    } finally {
      setLoading(false);
    }
  };

  /**
   * H√†m refetch
   */
  const refetch = () => {
    fetchBook();
  };

  // T·ª± ƒë·ªông fetch khi bookId thay ƒë·ªïi
  useEffect(() => {
    fetchBook();
  }, [bookId]);

  return {
    book,       // Th√¥ng tin s√°ch
    rating,     // Rating c·ªßa s√°ch
    loading,    // Tr·∫°ng th√°i loading
    error,      // Th√¥ng b√°o l·ªói
    refetch,    // H√†m reload
  };
};

/**
 * useBookSearch Hook
 * T√¨m ki·∫øm s√°ch theo title v·ªõi debounce
 * 
 * @param {string} query - T·ª´ kh√≥a t√¨m ki·∫øm
 * @param {Object} options - { enabled: boolean, delay: number }
 * @returns {Object} { results, loading, error }
 * 
 * @example
 * const [searchTerm, setSearchTerm] = useState('');
 * const { results, loading } = useBookSearch(searchTerm);
 */
export const useBookSearch = (query, options = {}) => {
  const { enabled = true, delay = 500 } = options;
  
  // State l∆∞u k·∫øt qu·∫£ t√¨m ki·∫øm
  const [results, setResults] = useState([]);
  
  // State loading
  const [loading, setLoading] = useState(false);
  
  // State l·ªói
  const [error, setError] = useState(null);

  useEffect(() => {
    // Kh√¥ng search n·∫øu disabled ho·∫∑c query r·ªóng
    if (!enabled || !query || query.trim().length === 0) {
      setResults([]);
      setLoading(false);
      return;
    }

    // Debounce search - ƒë·ª£i user ng·ª´ng g√µ
    const timeoutId = setTimeout(async () => {
      try {
        setLoading(true);
        setError(null);

        console.log('üîç ƒêang t√¨m ki·∫øm s√°ch:', query);
        
        // G·ªçi API search
        const response = await booksAPI.searchByTitle(query);
        
        // Response c√≥ th·ªÉ l√† array ho·∫∑c object
        const resultsData = Array.isArray(response) 
          ? response 
          : response.data || [];
        
        setResults(resultsData);
        console.log('‚úÖ T√¨m th·∫•y', resultsData.length, 'cu·ªën s√°ch');
      } catch (err) {
        console.error('‚ùå L·ªói khi t√¨m ki·∫øm:', err);
        setError(err.response?.data?.message || err.message);
        setResults([]);
      } finally {
        setLoading(false);
      }
    }, delay);

    // Cleanup timeout khi query thay ƒë·ªïi ho·∫∑c component unmount
    return () => clearTimeout(timeoutId);
  }, [query, enabled, delay]);

  return {
    results,    // K·∫øt qu·∫£ t√¨m ki·∫øm
    loading,    // Tr·∫°ng th√°i loading
    error,      // Th√¥ng b√°o l·ªói
  };
};

export default useBooks;